### Multiple-Choice Questions (MCQs):

1. What is a closure in Go?
   - A) A closure is a function that can access and modify variables defined outside of its body.
   - B) A closure is a function that has no parameters.
   - C) A closure is a function that returns multiple values.
   - D) A closure is a function that cannot be called directly.

2. How do you create a closure in Go?
   - A) By defining a function inside another function and accessing variables from the outer function.
   - B) By using the `closure` keyword before a function declaration.
   - C) By defining a function with no parameters.
   - D) By using the `defer` keyword.

3. What is recursion?
   - A) Recursion is a function that calls itself.
   - B) Recursion is a function that has no return statement.
   - C) Recursion is a function that returns multiple values.
   - D) Recursion is a function that cannot be called directly.

4. What is the base case in a recursive function?
   - A) The case where the function returns a value without calling itself.
   - B) The case where the function calls itself.
   - C) The case where the function has no return statement.
   - D) The case where the function returns multiple values.

5. Which of the following statements about recursion is true?
   - A) Recursion can only be used with loops.
   - B) Recursion can replace all loops.
   - C) Recursion is less efficient than loops.
   - D) Recursion cannot be used with functions.

6. What is the result of the following recursive function?
   ```go
   func factorial(n int) int {
       if n == 0 {
           return 1
       }
       return n * factorial(n-1)
   }
   ```
   - A) It calculates the factorial of a number.
   - B) It calculates the square of a number.
   - C) It calculates the sum of a number.
   - D) It calculates the Fibonacci sequence.

7. Which of the following is a common use case for closures?
   - A) Memoization
   - B) Implementing loops
   - C) Handling errors
   - D) Defining data structures

8. In a closure, which variables can be accessed from the outer function?
   - A) Only variables that are passed as arguments to the closure
   - B) Only global variables
   - C) All variables defined in the outer function's scope
   - D) Only variables defined after the closure

9. What is the output of the following code?
   ```go
   func main() {
       x := 0
       increment := func() int {
           x++
           return x
       }
       fmt.Println(increment())
       fmt.Println(increment())
   }
   ```
   - A) 1 2
   - B) 1 1
   - C) 0 1
   - D) 0 0

10. What is the purpose of a recursive function?
    - A) To repeat a sequence of instructions
    - B) To break a problem into smaller subproblems
    - C) To define a function within another function
    - D) To handle errors in a program
### Multiple-Choice Questions (MCQs) Answers:

1. A) A closure is a function that can access and modify variables defined outside of its body.
2. A) By defining a function inside another function and accessing variables from the outer function.
3. A) Recursion is a function that calls itself.
4. A) The case where the function returns a value without calling itself.
5. B) Recursion can replace all loops.
6. A) It calculates the factorial of a number.
7. A) Memoization
8. C) All variables defined in the outer function's scope
9. A) 1 2
10. B) To break a problem into smaller subproblems

Let me know if you need the answers!
Understood! Here are two more examples for Closures and Recursion in Go:

1. **Closures:**
   - Write a closure in Go that implements a simple calculator. The closure should return functions for addition, subtraction, multiplication, and division, each of which takes two float64 arguments and returns the result of the operation.

```go
package main
import "fmt"

func calculator() (add, sub, mul, div func(float64, float64) float64) {
    add = func(a, b float64) float64 { return a + b }
    sub = func(a, b float64) float64 { return a - b }
    mul = func(a, b float64) float64 { return a * b }
    div = func(a, b float64) float64 { return a / b }
    return
}

func main() {
    add, sub, mul, div := calculator()
    fmt.Println("Addition:", add(10, 5))       // Output: 15
    fmt.Println("Subtraction:", sub(10, 5))    // Output: 5
    fmt.Println("Multiplication:", mul(10, 5)) // Output: 50
    fmt.Println("Division:", div(10, 5))       // Output: 2
}
```

2. **Recursion:**
   - Write a recursive function in Go to calculate the sum of digits of a positive integer. For example, the sum of digits of 123 is 1 + 2 + 3 = 6.

```go
package main
import "fmt"

func sumOfDigits(n int) int {
    if n < 10 {
        return n
    }
    return n%10 + sumOfDigits(n/10)
}

func main() {
    fmt.Println("Sum of digits of 123:", sumOfDigits(123)) // Output: 6
    fmt.Println("Sum of digits of 456:", sumOfDigits(456)) // Output: 15
}
```

These examples showcase additional uses of closures and recursion in Go. Let me know if you need more examples or explanations!